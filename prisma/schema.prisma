// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  slug         String
  categoryId   String      @db.ObjectId
  category     Category    @relation(fields: [categoryId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  image        String?
  images       String[]
  imageHover   String?
  HomeConfig   HomeConfig? @relation(fields: [homeConfigId], references: [id])
  homeConfigId String?     @db.ObjectId
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Article {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  thumbnail String?
  slug      String        @unique
  tags      String[]
  status    ArticleStatus @default(DRAFT)
}

model Setting {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String?
  email       String?
  fbLink      String?
  youtubeLink String?
  zaloLink    String?
  address     String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum LinkType {
  PRODUCT
  CATEGORY
  ARTICLE
  CUSTOM
}

model Page {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      LinkType @default(CUSTOM)
  targetId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HomeConfig {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  sliders        String[]
  products       Product[]
  doYouKnows     Json?
  successStories Json?
  customerLogos  String[]
  extras         Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum ContactStatus {
  NEW
  REPLIED
  RESOLVED
  PROCESSING
}

model Contact {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  phone     String
  message   String
  status    ContactStatus @default(NEW)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminAccount {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  fullName     String
  phoneNumber  String
  passwordHash String
  salt         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
